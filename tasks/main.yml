---
# tasks file for httpd
- name: load default variables
  include_vars:
    file: default.yml

- name: load os-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - default.yml

- name: install software
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ httpd_packages }}"

- name: install requirements
  pip:
    name: "{{ item }}"
  with_items:
    - "{{ httpd_requirements }}"

- name: modify selinux settings
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  when:
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
  with_items:
    - "{{ httpd_sebooleans }}"

- name: create ssl directory
  file:
    path: "{{ httpd_configuration[ansible_distribution]['config_directory'] }}/ssl"
    state: directory

- name: create ssl key
  openssl_privatekey:
    path: "{{ httpd_config_directory }}/ssl/{{ httpd_ssl_servername }}.key"
  register: key

- name: create ssl csr
  openssl_csr:
    path: "{{ httpd_config_directory }}/ssl/{{ httpd_ssl_servername }}.csr"
    privatekey_path: "{{ key.filename }}"
    common_name: "{{ httpd_ssl_servername }}"
  register: csr

- name: create ssl certificates
  openssl_certificate:
    path: "{{ httpd_config_directory }}/ssl/{{ httpd_ssl_servername }}.crt"
    privatekey_path: "{{ csr.privatekey }}"
    csr_path: "{{ csr.filename }}"
    provider: selfsigned

- name: configure ssl
  template:
    src: ssl.conf.j2
    dest: "{{ httpd_config_directory }}/ssl.conf"
  notify:
    - restart httpd

- name: configure application
  template:
    src: application.conf.j2
    dest: "{{ httpd_config_directory }}/{{ item.name }}.conf"
  with_items:
    - "{{ httpd_applications }}"
  notify:
    - restart httpd
  when:
    - httpd_applications is defined
  loop_control:
    label: "{{ item.name }}"

- name: configure redirect from http to https
  template:
    src: default_vhost.conf.j2
    dest: "{{ httpd_config_directory }}/default_vhost.conf"
  notify:
    - restart httpd

- name: start and enable software
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - "{{ httpd_service }}"
  when:
    - ansible_virtualization_type != "docker"
